/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BillingoApiV3.DocumentApi();
  });

  describe('(package)', function() {
    describe('DocumentApi', function() {
      describe('archiveDocument', function() {
        it('should call archiveDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for archiveDocument call
          /*

          instance.archiveDocument(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cancelDocument', function() {
        it('should call cancelDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelDocument call and complete the assertions
          /*
          var opts = {};

          instance.cancelDocument(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDocument', function() {
        it('should call createDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for createDocument call and complete the assertions
          /*

          instance.createDocument(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDocumentFromDraft', function() {
        it('should call createDocumentFromDraft successfully', function(done) {
          // TODO: uncomment, update parameter values for createDocumentFromDraft call and complete the assertions
          /*

          instance.createDocumentFromDraft(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDocumentFromProforma', function() {
        it('should call createDocumentFromProforma successfully', function(done) {
          // TODO: uncomment, update parameter values for createDocumentFromProforma call and complete the assertions
          /*
          var opts = {};

          instance.createDocumentFromProforma(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createModificationDocument', function() {
        it('should call createModificationDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for createModificationDocument call and complete the assertions
          /*

          instance.createModificationDocument(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createReceipt', function() {
        it('should call createReceipt successfully', function(done) {
          // TODO: uncomment, update parameter values for createReceipt call and complete the assertions
          /*

          instance.createReceipt(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createReceiptFromDraft', function() {
        it('should call createReceiptFromDraft successfully', function(done) {
          // TODO: uncomment, update parameter values for createReceiptFromDraft call and complete the assertions
          /*

          instance.createReceiptFromDraft(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDocument', function() {
        it('should call deleteDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDocument call
          /*

          instance.deleteDocument(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePayment', function() {
        it('should call deletePayment successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePayment call and complete the assertions
          /*

          instance.deletePayment(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BillingoApiV3.PaymentHistory);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('documentCopy', function() {
        it('should call documentCopy successfully', function(done) {
          // TODO: uncomment, update parameter values for documentCopy call and complete the assertions
          /*

          instance.documentCopy(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('downloadDocument', function() {
        it('should call downloadDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for downloadDocument call and complete the assertions
          /*

          instance.downloadDocument(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDocument', function() {
        it('should call getDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for getDocument call and complete the assertions
          /*

          instance.getDocument(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDocumentByVendorId', function() {
        it('should call getDocumentByVendorId successfully', function(done) {
          // TODO: uncomment, update parameter values for getDocumentByVendorId call and complete the assertions
          /*

          instance.getDocumentByVendorId(vendorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOnlineSzamlaStatus', function() {
        it('should call getOnlineSzamlaStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getOnlineSzamlaStatus call and complete the assertions
          /*

          instance.getOnlineSzamlaStatus(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.OnlineSzamlaStatus);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPayment', function() {
        it('should call getPayment successfully', function(done) {
          // TODO: uncomment, update parameter values for getPayment call and complete the assertions
          /*

          instance.getPayment(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BillingoApiV3.PaymentHistory);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPublicUrl', function() {
        it('should call getPublicUrl successfully', function(done) {
          // TODO: uncomment, update parameter values for getPublicUrl call and complete the assertions
          /*

          instance.getPublicUrl(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.DocumentPublicUrl);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listDocument', function() {
        it('should call listDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for listDocument call and complete the assertions
          /*
          var opts = {};

          instance.listDocument(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.DocumentList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('posPrint', function() {
        it('should call posPrint successfully', function(done) {
          // TODO: uncomment, update parameter values for posPrint call and complete the assertions
          /*

          instance.posPrint(id, size, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sendDocument', function() {
        it('should call sendDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for sendDocument call and complete the assertions
          /*
          var opts = {};

          instance.sendDocument(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillingoApiV3.SendDocument);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePayment', function() {
        it('should call updatePayment successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePayment call and complete the assertions
          /*

          instance.updatePayment(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BillingoApiV3.PaymentHistory);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
