/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CreateDocumentExport', function() {
      beforeEach(function() {
        instance = new BillingoApiV3.CreateDocumentExport();
      });

      it('should create an instance of CreateDocumentExport', function() {
        // TODO: update the code to test CreateDocumentExport
        expect(instance).to.be.a(BillingoApiV3.CreateDocumentExport);
      });

      it('should have the property queryType (base name: "query_type")', function() {
        // TODO: update the code to test the property queryType
        expect(instance).to.have.property('queryType');
        // expect(instance.queryType).to.be(expectedValueLiteral);
      });

      it('should have the property startDate (base name: "start_date")', function() {
        // TODO: update the code to test the property startDate
        expect(instance).to.have.property('startDate');
        // expect(instance.startDate).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "end_date")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property documentBlockId (base name: "document_block_id")', function() {
        // TODO: update the code to test the property documentBlockId
        expect(instance).to.have.property('documentBlockId');
        // expect(instance.documentBlockId).to.be(expectedValueLiteral);
      });

      it('should have the property exportType (base name: "export_type")', function() {
        // TODO: update the code to test the property exportType
        expect(instance).to.have.property('exportType');
        // expect(instance.exportType).to.be(expectedValueLiteral);
      });

      it('should have the property numberStartYear (base name: "number_start_year")', function() {
        // TODO: update the code to test the property numberStartYear
        expect(instance).to.have.property('numberStartYear');
        // expect(instance.numberStartYear).to.be(expectedValueLiteral);
      });

      it('should have the property numberStartSequence (base name: "number_start_sequence")', function() {
        // TODO: update the code to test the property numberStartSequence
        expect(instance).to.have.property('numberStartSequence');
        // expect(instance.numberStartSequence).to.be(expectedValueLiteral);
      });

      it('should have the property numberEndYear (base name: "number_end_year")', function() {
        // TODO: update the code to test the property numberEndYear
        expect(instance).to.have.property('numberEndYear');
        // expect(instance.numberEndYear).to.be(expectedValueLiteral);
      });

      it('should have the property numberEndSequence (base name: "number_end_sequence")', function() {
        // TODO: update the code to test the property numberEndSequence
        expect(instance).to.have.property('numberEndSequence');
        // expect(instance.numberEndSequence).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethod (base name: "payment_method")', function() {
        // TODO: update the code to test the property paymentMethod
        expect(instance).to.have.property('paymentMethod');
        // expect(instance.paymentMethod).to.be(expectedValueLiteral);
      });

      it('should have the property sortBy (base name: "sort_by")', function() {
        // TODO: update the code to test the property sortBy
        expect(instance).to.have.property('sortBy');
        // expect(instance.sortBy).to.be(expectedValueLiteral);
      });

      it('should have the property otherOptions (base name: "other_options")', function() {
        // TODO: update the code to test the property otherOptions
        expect(instance).to.have.property('otherOptions');
        // expect(instance.otherOptions).to.be(expectedValueLiteral);
      });

      it('should have the property filterExtra (base name: "filter_extra")', function() {
        // TODO: update the code to test the property filterExtra
        expect(instance).to.have.property('filterExtra');
        // expect(instance.filterExtra).to.be(expectedValueLiteral);
      });

    });
  });

}));
