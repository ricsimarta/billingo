/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Entitlement', function() {
      beforeEach(function() {
        instance = BillingoApiV3.Entitlement;
      });

      it('should create an instance of Entitlement', function() {
        // TODO: update the code to test Entitlement
        expect(instance).to.be.a('object');
      });

      it('should have the property AAM', function() {
        expect(instance).to.have.property('AAM');
        expect(instance.AAM).to.be("AAM");
      });

      it('should have the property ANTIQUES', function() {
        expect(instance).to.have.property('ANTIQUES');
        expect(instance.ANTIQUES).to.be("ANTIQUES");
      });

      it('should have the property ARTWORK', function() {
        expect(instance).to.have.property('ARTWORK');
        expect(instance.ARTWORK).to.be("ARTWORK");
      });

      it('should have the property ATK', function() {
        expect(instance).to.have.property('ATK');
        expect(instance.ATK).to.be("ATK");
      });

      it('should have the property EAM', function() {
        expect(instance).to.have.property('EAM');
        expect(instance.EAM).to.be("EAM");
      });

      it('should have the property EUE', function() {
        expect(instance).to.have.property('EUE');
        expect(instance.EUE).to.be("EUE");
      });

      it('should have the property eUFAD37', function() {
        expect(instance).to.have.property('eUFAD37');
        expect(instance.eUFAD37).to.be("EUFAD37");
      });

      it('should have the property EUFADE', function() {
        expect(instance).to.have.property('EUFADE');
        expect(instance.EUFADE).to.be("EUFADE");
      });

      it('should have the property HO', function() {
        expect(instance).to.have.property('HO');
        expect(instance.HO).to.be("HO");
      });

      it('should have the property KBAET', function() {
        expect(instance).to.have.property('KBAET');
        expect(instance.KBAET).to.be("KBAET");
      });

      it('should have the property nAM1', function() {
        expect(instance).to.have.property('nAM1');
        expect(instance.nAM1).to.be("NAM_1");
      });

      it('should have the property nAM2', function() {
        expect(instance).to.have.property('nAM2');
        expect(instance.nAM2).to.be("NAM_2");
      });

      it('should have the property SECOND_HAND', function() {
        expect(instance).to.have.property('SECOND_HAND');
        expect(instance.SECOND_HAND).to.be("SECOND_HAND");
      });

      it('should have the property TAM', function() {
        expect(instance).to.have.property('TAM');
        expect(instance.TAM).to.be("TAM");
      });

      it('should have the property TRAVEL_AGENCY', function() {
        expect(instance).to.have.property('TRAVEL_AGENCY');
        expect(instance.TRAVEL_AGENCY).to.be("TRAVEL_AGENCY");
      });

    });
  });

}));
