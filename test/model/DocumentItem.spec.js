/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DocumentItem', function() {
      beforeEach(function() {
        instance = new BillingoApiV3.DocumentItem();
      });

      it('should create an instance of DocumentItem', function() {
        // TODO: update the code to test DocumentItem
        expect(instance).to.be.a(BillingoApiV3.DocumentItem);
      });

      it('should have the property productId (base name: "product_id")', function() {
        // TODO: update the code to test the property productId
        expect(instance).to.have.property('productId');
        // expect(instance.productId).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property netUnitAmount (base name: "net_unit_amount")', function() {
        // TODO: update the code to test the property netUnitAmount
        expect(instance).to.have.property('netUnitAmount');
        // expect(instance.netUnitAmount).to.be(expectedValueLiteral);
      });

      it('should have the property quantity (base name: "quantity")', function() {
        // TODO: update the code to test the property quantity
        expect(instance).to.have.property('quantity');
        // expect(instance.quantity).to.be(expectedValueLiteral);
      });

      it('should have the property unit (base name: "unit")', function() {
        // TODO: update the code to test the property unit
        expect(instance).to.have.property('unit');
        // expect(instance.unit).to.be(expectedValueLiteral);
      });

      it('should have the property netAmount (base name: "net_amount")', function() {
        // TODO: update the code to test the property netAmount
        expect(instance).to.have.property('netAmount');
        // expect(instance.netAmount).to.be(expectedValueLiteral);
      });

      it('should have the property grossAmount (base name: "gross_amount")', function() {
        // TODO: update the code to test the property grossAmount
        expect(instance).to.have.property('grossAmount');
        // expect(instance.grossAmount).to.be(expectedValueLiteral);
      });

      it('should have the property vat (base name: "vat")', function() {
        // TODO: update the code to test the property vat
        expect(instance).to.have.property('vat');
        // expect(instance.vat).to.be(expectedValueLiteral);
      });

      it('should have the property vatAmount (base name: "vat_amount")', function() {
        // TODO: update the code to test the property vatAmount
        expect(instance).to.have.property('vatAmount');
        // expect(instance.vatAmount).to.be(expectedValueLiteral);
      });

      it('should have the property entitlement (base name: "entitlement")', function() {
        // TODO: update the code to test the property entitlement
        expect(instance).to.have.property('entitlement');
        // expect(instance.entitlement).to.be(expectedValueLiteral);
      });

      it('should have the property comment (base name: "comment")', function() {
        // TODO: update the code to test the property comment
        expect(instance).to.have.property('comment');
        // expect(instance.comment).to.be(expectedValueLiteral);
      });

    });
  });

}));
