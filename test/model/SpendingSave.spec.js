/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SpendingSave', function() {
      beforeEach(function() {
        instance = new BillingoApiV3.SpendingSave();
      });

      it('should create an instance of SpendingSave', function() {
        // TODO: update the code to test SpendingSave
        expect(instance).to.be.a(BillingoApiV3.SpendingSave);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property conversionRate (base name: "conversion_rate")', function() {
        // TODO: update the code to test the property conversionRate
        expect(instance).to.have.property('conversionRate');
        // expect(instance.conversionRate).to.be(expectedValueLiteral);
      });

      it('should have the property totalGross (base name: "total_gross")', function() {
        // TODO: update the code to test the property totalGross
        expect(instance).to.have.property('totalGross');
        // expect(instance.totalGross).to.be(expectedValueLiteral);
      });

      it('should have the property totalGrossHuf (base name: "total_gross_huf")', function() {
        // TODO: update the code to test the property totalGrossHuf
        expect(instance).to.have.property('totalGrossHuf');
        // expect(instance.totalGrossHuf).to.be(expectedValueLiteral);
      });

      it('should have the property totalVatAmount (base name: "total_vat_amount")', function() {
        // TODO: update the code to test the property totalVatAmount
        expect(instance).to.have.property('totalVatAmount');
        // expect(instance.totalVatAmount).to.be(expectedValueLiteral);
      });

      it('should have the property totalVatAmountHuf (base name: "total_vat_amount_huf")', function() {
        // TODO: update the code to test the property totalVatAmountHuf
        expect(instance).to.have.property('totalVatAmountHuf');
        // expect(instance.totalVatAmountHuf).to.be(expectedValueLiteral);
      });

      it('should have the property fulfillmentDate (base name: "fulfillment_date")', function() {
        // TODO: update the code to test the property fulfillmentDate
        expect(instance).to.have.property('fulfillmentDate');
        // expect(instance.fulfillmentDate).to.be(expectedValueLiteral);
      });

      it('should have the property paidAt (base name: "paid_at")', function() {
        // TODO: update the code to test the property paidAt
        expect(instance).to.have.property('paidAt');
        // expect(instance.paidAt).to.be(expectedValueLiteral);
      });

      it('should have the property category (base name: "category")', function() {
        // TODO: update the code to test the property category
        expect(instance).to.have.property('category');
        // expect(instance.category).to.be(expectedValueLiteral);
      });

      it('should have the property comment (base name: "comment")', function() {
        // TODO: update the code to test the property comment
        expect(instance).to.have.property('comment');
        // expect(instance.comment).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceNumber (base name: "invoice_number")', function() {
        // TODO: update the code to test the property invoiceNumber
        expect(instance).to.have.property('invoiceNumber');
        // expect(instance.invoiceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceDate (base name: "invoice_date")', function() {
        // TODO: update the code to test the property invoiceDate
        expect(instance).to.have.property('invoiceDate');
        // expect(instance.invoiceDate).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "due_date")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethod (base name: "payment_method")', function() {
        // TODO: update the code to test the property paymentMethod
        expect(instance).to.have.property('paymentMethod');
        // expect(instance.paymentMethod).to.be(expectedValueLiteral);
      });

      it('should have the property partnerId (base name: "partner_id")', function() {
        // TODO: update the code to test the property partnerId
        expect(instance).to.have.property('partnerId');
        // expect(instance.partnerId).to.be(expectedValueLiteral);
      });

    });
  });

}));
