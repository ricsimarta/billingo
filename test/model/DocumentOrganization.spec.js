/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DocumentOrganization', function() {
      beforeEach(function() {
        instance = new BillingoApiV3.DocumentOrganization();
      });

      it('should create an instance of DocumentOrganization', function() {
        // TODO: update the code to test DocumentOrganization
        expect(instance).to.be.a(BillingoApiV3.DocumentOrganization);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property taxNumber (base name: "tax_number")', function() {
        // TODO: update the code to test the property taxNumber
        expect(instance).to.have.property('taxNumber');
        // expect(instance.taxNumber).to.be(expectedValueLiteral);
      });

      it('should have the property bankAccount (base name: "bank_account")', function() {
        // TODO: update the code to test the property bankAccount
        expect(instance).to.have.property('bankAccount');
        // expect(instance.bankAccount).to.be(expectedValueLiteral);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property smallTaxpayer (base name: "small_taxpayer")', function() {
        // TODO: update the code to test the property smallTaxpayer
        expect(instance).to.have.property('smallTaxpayer');
        // expect(instance.smallTaxpayer).to.be(expectedValueLiteral);
      });

      it('should have the property evNumber (base name: "ev_number")', function() {
        // TODO: update the code to test the property evNumber
        expect(instance).to.have.property('evNumber');
        // expect(instance.evNumber).to.be(expectedValueLiteral);
      });

      it('should have the property euTaxNumber (base name: "eu_tax_number")', function() {
        // TODO: update the code to test the property euTaxNumber
        expect(instance).to.have.property('euTaxNumber');
        // expect(instance.euTaxNumber).to.be(expectedValueLiteral);
      });

      it('should have the property cashSettled (base name: "cash_settled")', function() {
        // TODO: update the code to test the property cashSettled
        expect(instance).to.have.property('cashSettled');
        // expect(instance.cashSettled).to.be(expectedValueLiteral);
      });

    });
  });

}));
