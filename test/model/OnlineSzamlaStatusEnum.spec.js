/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OnlineSzamlaStatusEnum', function() {
      beforeEach(function() {
        instance = BillingoApiV3.OnlineSzamlaStatusEnum;
      });

      it('should create an instance of OnlineSzamlaStatusEnum', function() {
        // TODO: update the code to test OnlineSzamlaStatusEnum
        expect(instance).to.be.a('object');
      });

      it('should have the property aborted', function() {
        expect(instance).to.have.property('aborted');
        expect(instance.aborted).to.be("aborted");
      });

      it('should have the property done', function() {
        expect(instance).to.have.property('done');
        expect(instance.done).to.be("done");
      });

      it('should have the property emptyOrganizationCountryCode', function() {
        expect(instance).to.have.property('emptyOrganizationCountryCode');
        expect(instance.emptyOrganizationCountryCode).to.be("empty_organization_country_code");
      });

      it('should have the property emptyPartnerCountryCode', function() {
        expect(instance).to.have.property('emptyPartnerCountryCode');
        expect(instance.emptyPartnerCountryCode).to.be("empty_partner_country_code");
      });

      it('should have the property emptyTax', function() {
        expect(instance).to.have.property('emptyTax');
        expect(instance.emptyTax).to.be("empty_tax");
      });

      it('should have the property forbidden', function() {
        expect(instance).to.have.property('forbidden');
        expect(instance.forbidden).to.be("forbidden");
      });

      it('should have the property invalidAddress', function() {
        expect(instance).to.have.property('invalidAddress');
        expect(instance.invalidAddress).to.be("invalid_address");
      });

      it('should have the property invalidClient', function() {
        expect(instance).to.have.property('invalidClient');
        expect(instance.invalidClient).to.be("invalid_client");
      });

      it('should have the property invalidConversionRate', function() {
        expect(instance).to.have.property('invalidConversionRate');
        expect(instance.invalidConversionRate).to.be("invalid_conversion_rate");
      });

      it('should have the property invalidCustomer', function() {
        expect(instance).to.have.property('invalidCustomer');
        expect(instance.invalidCustomer).to.be("invalid_customer");
      });

      it('should have the property invalidInvoiceReference', function() {
        expect(instance).to.have.property('invalidInvoiceReference');
        expect(instance.invalidInvoiceReference).to.be("invalid_invoice_reference");
      });

      it('should have the property invalidPostalcode', function() {
        expect(instance).to.have.property('invalidPostalcode');
        expect(instance.invalidPostalcode).to.be("invalid_postalcode");
      });

      it('should have the property invalidSecurityUser', function() {
        expect(instance).to.have.property('invalidSecurityUser');
        expect(instance.invalidSecurityUser).to.be("invalid_security_user");
      });

      it('should have the property invalidTax', function() {
        expect(instance).to.have.property('invalidTax');
        expect(instance.invalidTax).to.be("invalid_tax");
      });

      it('should have the property invalidTaxNumber', function() {
        expect(instance).to.have.property('invalidTaxNumber');
        expect(instance.invalidTaxNumber).to.be("invalid_tax_number");
      });

      it('should have the property invalidUserRelation', function() {
        expect(instance).to.have.property('invalidUserRelation');
        expect(instance.invalidUserRelation).to.be("invalid_user_relation");
      });

      it('should have the property invalidVatData', function() {
        expect(instance).to.have.property('invalidVatData');
        expect(instance.invalidVatData).to.be("invalid_vat_data");
      });

      it('should have the property invoiceNumberNotUnique', function() {
        expect(instance).to.have.property('invoiceNumberNotUnique');
        expect(instance.invoiceNumberNotUnique).to.be("invoice_number_not_unique");
      });

      it('should have the property kobakProcessing', function() {
        expect(instance).to.have.property('kobakProcessing');
        expect(instance.kobakProcessing).to.be("kobak_processing");
      });

      it('should have the property missingDocumentItemName', function() {
        expect(instance).to.have.property('missingDocumentItemName');
        expect(instance.missingDocumentItemName).to.be("missing_document_item_name");
      });

      it('should have the property navWarn', function() {
        expect(instance).to.have.property('navWarn');
        expect(instance.navWarn).to.be("nav_warn");
      });

      it('should have the property noOnlineSzamlaSettings', function() {
        expect(instance).to.have.property('noOnlineSzamlaSettings');
        expect(instance.noOnlineSzamlaSettings).to.be("no_online_szamla_settings");
      });

      it('should have the property noSendByUser', function() {
        expect(instance).to.have.property('noSendByUser');
        expect(instance.noSendByUser).to.be("no_send_by_user");
      });

      it('should have the property nonExistTaxNumber', function() {
        expect(instance).to.have.property('nonExistTaxNumber');
        expect(instance.nonExistTaxNumber).to.be("non_exist_tax_number");
      });

      it('should have the property notUnique', function() {
        expect(instance).to.have.property('notUnique');
        expect(instance.notUnique).to.be("not unique");
      });

      it('should have the property notChecked', function() {
        expect(instance).to.have.property('notChecked');
        expect(instance.notChecked).to.be("not_checked");
      });

      it('should have the property notRegisteredCustomer', function() {
        expect(instance).to.have.property('notRegisteredCustomer');
        expect(instance.notRegisteredCustomer).to.be("not_registered_customer");
      });

      it('should have the property processing', function() {
        expect(instance).to.have.property('processing');
        expect(instance.processing).to.be("processing");
      });

      it('should have the property received', function() {
        expect(instance).to.have.property('received');
        expect(instance.received).to.be("received");
      });

      it('should have the property saved', function() {
        expect(instance).to.have.property('saved');
        expect(instance.saved).to.be("saved");
      });

      it('should have the property sendFailed', function() {
        expect(instance).to.have.property('sendFailed');
        expect(instance.sendFailed).to.be("send_failed");
      });

      it('should have the property sent', function() {
        expect(instance).to.have.property('sent');
        expect(instance.sent).to.be("sent");
      });

      it('should have the property started', function() {
        expect(instance).to.have.property('started');
        expect(instance.started).to.be("started");
      });

      it('should have the property technicalError', function() {
        expect(instance).to.have.property('technicalError');
        expect(instance.technicalError).to.be("technical_error");
      });

      it('should have the property underTaxLimit', function() {
        expect(instance).to.have.property('underTaxLimit');
        expect(instance.underTaxLimit).to.be("under_tax_limit");
      });

      it('should have the property userHasInvalidKobak', function() {
        expect(instance).to.have.property('userHasInvalidKobak');
        expect(instance.userHasInvalidKobak).to.be("user_has_invalid_kobak");
      });

      it('should have the property userHasnotKobak', function() {
        expect(instance).to.have.property('userHasnotKobak');
        expect(instance.userHasnotKobak).to.be("user_hasnot_kobak");
      });

      it('should have the property validationOk', function() {
        expect(instance).to.have.property('validationOk');
        expect(instance.validationOk).to.be("validation_ok");
      });

    });
  });

}));
