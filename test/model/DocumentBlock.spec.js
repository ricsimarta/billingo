/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DocumentBlock', function() {
      beforeEach(function() {
        instance = new BillingoApiV3.DocumentBlock();
      });

      it('should create an instance of DocumentBlock', function() {
        // TODO: update the code to test DocumentBlock
        expect(instance).to.be.a(BillingoApiV3.DocumentBlock);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property prefix (base name: "prefix")', function() {
        // TODO: update the code to test the property prefix
        expect(instance).to.have.property('prefix');
        // expect(instance.prefix).to.be(expectedValueLiteral);
      });

      it('should have the property customField1 (base name: "custom_field1")', function() {
        // TODO: update the code to test the property customField1
        expect(instance).to.have.property('customField1');
        // expect(instance.customField1).to.be(expectedValueLiteral);
      });

      it('should have the property customField2 (base name: "custom_field2")', function() {
        // TODO: update the code to test the property customField2
        expect(instance).to.have.property('customField2');
        // expect(instance.customField2).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

    });
  });

}));
