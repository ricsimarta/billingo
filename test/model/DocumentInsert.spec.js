/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DocumentInsert', function() {
      beforeEach(function() {
        instance = new BillingoApiV3.DocumentInsert();
      });

      it('should create an instance of DocumentInsert', function() {
        // TODO: update the code to test DocumentInsert
        expect(instance).to.be.a(BillingoApiV3.DocumentInsert);
      });

      it('should have the property vendorId (base name: "vendor_id")', function() {
        // TODO: update the code to test the property vendorId
        expect(instance).to.have.property('vendorId');
        // expect(instance.vendorId).to.be(expectedValueLiteral);
      });

      it('should have the property partnerId (base name: "partner_id")', function() {
        // TODO: update the code to test the property partnerId
        expect(instance).to.have.property('partnerId');
        // expect(instance.partnerId).to.be(expectedValueLiteral);
      });

      it('should have the property blockId (base name: "block_id")', function() {
        // TODO: update the code to test the property blockId
        expect(instance).to.have.property('blockId');
        // expect(instance.blockId).to.be(expectedValueLiteral);
      });

      it('should have the property bankAccountId (base name: "bank_account_id")', function() {
        // TODO: update the code to test the property bankAccountId
        expect(instance).to.have.property('bankAccountId');
        // expect(instance.bankAccountId).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property fulfillmentDate (base name: "fulfillment_date")', function() {
        // TODO: update the code to test the property fulfillmentDate
        expect(instance).to.have.property('fulfillmentDate');
        // expect(instance.fulfillmentDate).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "due_date")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethod (base name: "payment_method")', function() {
        // TODO: update the code to test the property paymentMethod
        expect(instance).to.have.property('paymentMethod');
        // expect(instance.paymentMethod).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property conversionRate (base name: "conversion_rate")', function() {
        // TODO: update the code to test the property conversionRate
        expect(instance).to.have.property('conversionRate');
        // expect(instance.conversionRate).to.be(expectedValueLiteral);
      });

      it('should have the property electronic (base name: "electronic")', function() {
        // TODO: update the code to test the property electronic
        expect(instance).to.have.property('electronic');
        // expect(instance.electronic).to.be(expectedValueLiteral);
      });

      it('should have the property paid (base name: "paid")', function() {
        // TODO: update the code to test the property paid
        expect(instance).to.have.property('paid');
        // expect(instance.paid).to.be(expectedValueLiteral);
      });

      it('should have the property items (base name: "items")', function() {
        // TODO: update the code to test the property items
        expect(instance).to.have.property('items');
        // expect(instance.items).to.be(expectedValueLiteral);
      });

      it('should have the property comment (base name: "comment")', function() {
        // TODO: update the code to test the property comment
        expect(instance).to.have.property('comment');
        // expect(instance.comment).to.be(expectedValueLiteral);
      });

      it('should have the property settings (base name: "settings")', function() {
        // TODO: update the code to test the property settings
        expect(instance).to.have.property('settings');
        // expect(instance.settings).to.be(expectedValueLiteral);
      });

      it('should have the property advanceInvoice (base name: "advance_invoice")', function() {
        // TODO: update the code to test the property advanceInvoice
        expect(instance).to.have.property('advanceInvoice');
        // expect(instance.advanceInvoice).to.be(expectedValueLiteral);
      });

      it('should have the property discount (base name: "discount")', function() {
        // TODO: update the code to test the property discount
        expect(instance).to.have.property('discount');
        // expect(instance.discount).to.be(expectedValueLiteral);
      });

      it('should have the property instantPayment (base name: "instant_payment")', function() {
        // TODO: update the code to test the property instantPayment
        expect(instance).to.have.property('instantPayment');
        // expect(instance.instantPayment).to.be(expectedValueLiteral);
      });

    });
  });

}));
