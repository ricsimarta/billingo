/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BankAccount} from '../model/BankAccount';
import {BankAccountList} from '../model/BankAccountList';
import {ClientErrorResponse} from '../model/ClientErrorResponse';
import {ServerErrorResponse} from '../model/ServerErrorResponse';
import {SubscriptionErrorResponse} from '../model/SubscriptionErrorResponse';
import {TooManyRequestsResponse} from '../model/TooManyRequestsResponse';
import {ValidationErrorResponse} from '../model/ValidationErrorResponse';

/**
* BankAccount service.
* @module api/BankAccountApi
* @version 3.0.14
*/
export class BankAccountApi {

    /**
    * Constructs a new BankAccountApi. 
    * @alias module:api/BankAccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createBankAccount operation.
     * @callback moduleapi/BankAccountApi~createBankAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccount{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bank account
     * Create a new bank account. Returns a bank account object if the create is succeded.
     * @param {module:model/BankAccount} body BankAccount object that you would like to store.
     * @param {module:api/BankAccountApi~createBankAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createBankAccount(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBankAccount");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankAccount;

      return this.apiClient.callApi(
        '/bank-accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteBankAccount operation.
     * @callback moduleapi/BankAccountApi~deleteBankAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a bank account
     * Delete an existing bank account.
     * @param {Number} id 
     * @param {module:api/BankAccountApi~deleteBankAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBankAccount(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBankAccount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bank-accounts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBankAccount operation.
     * @callback moduleapi/BankAccountApi~getBankAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccount{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a bank account
     * Retrieves the details of an existing bank account.
     * @param {Number} id 
     * @param {module:api/BankAccountApi~getBankAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBankAccount(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBankAccount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BankAccount;

      return this.apiClient.callApi(
        '/bank-accounts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listBankAccount operation.
     * @callback moduleapi/BankAccountApi~listBankAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccountList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all bank account
     * Returns a list of your bank accounts. The bank accounts are returned sorted by creation date, with the most recent bank account appearing first.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage  (default to <.>)
     * @param {module:api/BankAccountApi~listBankAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listBankAccount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BankAccountList;

      return this.apiClient.callApi(
        '/bank-accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateBankAccount operation.
     * @callback moduleapi/BankAccountApi~updateBankAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccount{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a bank account
     * Update an existing bank accounts. Returns a bank account object if the update is succeded.
     * @param {module:model/BankAccount} body Bank account object that you would like to update.
     * @param {Number} id 
     * @param {module:api/BankAccountApi~updateBankAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateBankAccount(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBankAccount");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBankAccount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankAccount;

      return this.apiClient.callApi(
        '/bank-accounts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}