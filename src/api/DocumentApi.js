/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ClientError} from '../model/ClientError';
import {ClientErrorResponse} from '../model/ClientErrorResponse';
import {Document} from '../model/Document';
import {DocumentCancellation} from '../model/DocumentCancellation';
import {DocumentInsert} from '../model/DocumentInsert';
import {DocumentList} from '../model/DocumentList';
import {DocumentPublicUrl} from '../model/DocumentPublicUrl';
import {DocumentType} from '../model/DocumentType';
import {InvoiceSettings} from '../model/InvoiceSettings';
import {ModificationDocumentInsert} from '../model/ModificationDocumentInsert';
import {OnlineSzamlaStatus} from '../model/OnlineSzamlaStatus';
import {PaymentHistory} from '../model/PaymentHistory';
import {PaymentMethod} from '../model/PaymentMethod';
import {PaymentStatus} from '../model/PaymentStatus';
import {ReceiptInsert} from '../model/ReceiptInsert';
import {SendDocument} from '../model/SendDocument';
import {ServerErrorResponse} from '../model/ServerErrorResponse';
import {SubscriptionErrorResponse} from '../model/SubscriptionErrorResponse';
import {TooManyRequestsResponse} from '../model/TooManyRequestsResponse';
import {ValidationErrorResponse} from '../model/ValidationErrorResponse';

/**
* Document service.
* @module api/DocumentApi
* @version 3.0.14
*/
export class DocumentApi {

    /**
    * Constructs a new DocumentApi. 
    * @alias module:api/DocumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the archiveDocument operation.
     * @callback moduleapi/DocumentApi~archiveDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive a proforma document.
     * Archive an existing proforma document.
     * @param {Number} id 
     * @param {module:api/DocumentApi~archiveDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archiveDocument(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling archiveDocument");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/documents/{id}/archive', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cancelDocument operation.
     * @callback moduleapi/DocumentApi~cancelDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a document
     * Cancel a document. Returns a cancellation document object if the cancellation is succeded.
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DocumentCancellation} opts.body Comment and notifiable email addresses - comma separated for multiple email addresses
     * @param {module:api/DocumentApi~cancelDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cancelDocument(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelDocument");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createDocument operation.
     * @callback moduleapi/DocumentApi~createDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a document
     * Create a new document. Returns a document object if the create is succeded.
     * @param {module:model/DocumentInsert} body DocumentInsert object that you would like to store.
     * @param {module:api/DocumentApi~createDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createDocument(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDocument");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createDocumentFromDraft operation.
     * @callback moduleapi/DocumentApi~createDocumentFromDraftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Converts a draft to an invoice.
     * Converts a draft to an invoice. Returns the invoice object if the convert is succeded.
     * @param {module:model/DocumentInsert} body DocumentInsert object that you would like to store.
     * @param {Number} id 
     * @param {module:api/DocumentApi~createDocumentFromDraftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createDocumentFromDraft(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDocumentFromDraft");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createDocumentFromDraft");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createDocumentFromProforma operation.
     * @callback moduleapi/DocumentApi~createDocumentFromProformaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a document from proforma.
     * Create a new document from proforma. Returns a document object if the create is succeded.
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/InvoiceSettings} opts.body InvoiceSettings object.
     * @param {module:api/DocumentApi~createDocumentFromProformaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createDocumentFromProforma(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createDocumentFromProforma");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents/{id}/create-from-proforma', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createModificationDocument operation.
     * @callback moduleapi/DocumentApi~createModificationDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a modification document.
     * Create a modification document for the given document. Returns a new document object if the create is successful.
     * @param {module:model/ModificationDocumentInsert} body ModificationDocumentInsert object that you would like to store.
     * @param {Number} id 
     * @param {module:api/DocumentApi~createModificationDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createModificationDocument(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createModificationDocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createModificationDocument");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents/{id}/create-modification-document', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createReceipt operation.
     * @callback moduleapi/DocumentApi~createReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a receipt
     * Create a new receipt. Returns a document object if the create is succeded.
     * @param {module:model/ReceiptInsert} body ReceiptInsert object that you would like to store.
     * @param {module:api/DocumentApi~createReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createReceipt(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createReceipt");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents/receipt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createReceiptFromDraft operation.
     * @callback moduleapi/DocumentApi~createReceiptFromDraftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Converts a draft to a receipt.
     * Converts a draft to a receipt. Returns the receipt object if the convert is succeded.
     * @param {module:model/ReceiptInsert} body ReceiptInsert object that you would like to store.
     * @param {Number} id 
     * @param {module:api/DocumentApi~createReceiptFromDraftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createReceiptFromDraft(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createReceiptFromDraft");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createReceiptFromDraft");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents/receipt/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteDocument operation.
     * @callback moduleapi/DocumentApi~deleteDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a draft.
     * Delete an existing draft.
     * @param {Number} id 
     * @param {module:api/DocumentApi~deleteDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDocument(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDocument");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/documents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePayment operation.
     * @callback moduleapi/DocumentApi~deletePaymentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentHistory>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all payment history on document
     * Delete all exist payment history on document.
     * @param {Number} id 
     * @param {module:api/DocumentApi~deletePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePayment(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePayment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PaymentHistory];

      return this.apiClient.callApi(
        '/documents/{id}/payments', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the documentCopy operation.
     * @callback moduleapi/DocumentApi~documentCopyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy a document
     * Copy a document. Returns the new document if the copy was succeded.
     * @param {Number} id 
     * @param {module:api/DocumentApi~documentCopyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    documentCopy(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentCopy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents/{id}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the downloadDocument operation.
     * @callback moduleapi/DocumentApi~downloadDocumentCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a document in PDF format.
     * Download a document. Returns a document in PDF format.
     * @param {Number} id 
     * @param {module:api/DocumentApi~downloadDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    downloadDocument(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadDocument");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/documents/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDocument operation.
     * @callback moduleapi/DocumentApi~getDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a document
     * Retrieves the details of an existing document.
     * @param {Number} id 
     * @param {module:api/DocumentApi~getDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDocument(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDocument");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDocumentByVendorId operation.
     * @callback moduleapi/DocumentApi~getDocumentByVendorIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a document by vendor id
     * Retrieves the details of an existing document by vendor id.
     * @param {String} vendorId 
     * @param {module:api/DocumentApi~getDocumentByVendorIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDocumentByVendorId(vendorId, callback) {
      
      let postBody = null;
      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling getDocumentByVendorId");
      }

      let pathParams = {
        'vendor_id': vendorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents/vendor/{vendor_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnlineSzamlaStatus operation.
     * @callback moduleapi/DocumentApi~getOnlineSzamlaStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnlineSzamlaStatus{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a document Online Számla status
     * Retrieves the details of an existing document status.
     * @param {Number} id 
     * @param {module:api/DocumentApi~getOnlineSzamlaStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnlineSzamlaStatus(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnlineSzamlaStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OnlineSzamlaStatus;

      return this.apiClient.callApi(
        '/documents/{id}/online-szamla', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayment operation.
     * @callback moduleapi/DocumentApi~getPaymentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentHistory>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a payment histroy
     * Retrieves the details of payment history an existing document.
     * @param {Number} id 
     * @param {module:api/DocumentApi~getPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayment(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPayment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PaymentHistory];

      return this.apiClient.callApi(
        '/documents/{id}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPublicUrl operation.
     * @callback moduleapi/DocumentApi~getPublicUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentPublicUrl{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a document download public url.
     * Retrieves public url to download an existing document.
     * @param {Number} id 
     * @param {module:api/DocumentApi~getPublicUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPublicUrl(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPublicUrl");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentPublicUrl;

      return this.apiClient.callApi(
        '/documents/{id}/public-url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listDocument operation.
     * @callback moduleapi/DocumentApi~listDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all documents
     * Returns a list of your documents. The documents are returned sorted by creation date, with the most recent documents appearing first.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage  (default to <.>)
     * @param {Number} opts.blockId Filter documents by the identifier of your DocumentBlock.
     * @param {Number} opts.partnerId Filter documents by the identifier of your Partner.
     * @param {module:model/PaymentMethod} opts.paymentMethod Filter documents by PaymentMethod value.
     * @param {module:model/PaymentStatus} opts.paymentStatus Filter documents by PaymentStatus value.
     * @param {Date} opts.startDate Filter documents by their invoice date.
     * @param {Date} opts.endDate Filter documents by their invoice date.
     * @param {Number} opts.startNumber Starting number of the document, should not contain year or any other formatting. Required if &#x60;start_year&#x60; given
     * @param {Number} opts.endNumber Ending number of the document, should not contain year or any other formatting. Required if &#x60;end_year&#x60; given
     * @param {Number} opts.startYear Year for &#x60;start_number&#x60; parameter. Required if &#x60;start_number&#x60; given.
     * @param {Number} opts.endYear Year for &#x60;end_number&#x60; parameter. Required if &#x60;end_number&#x60; given.
     * @param {module:model/DocumentType} opts.type Filter documents by type
     * @param {String} opts.query Filter documents by the given text
     * @param {Date} opts.paidStartDate Filter documents by their payment date.
     * @param {Date} opts.paidEndDate Filter documents by their payment date.
     * @param {Date} opts.fulfillmentStartDate Filter documents by their fulfillment date.
     * @param {Date} opts.fulfillmentEndDate Filter documents by their fulfillment date.
     * @param {String} opts.lastModifiedDate Filter documents by their last modified date.
     * @param {module:api/DocumentApi~listDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listDocument(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage'],'block_id': opts['blockId'],'partner_id': opts['partnerId'],'payment_method': opts['paymentMethod'],'payment_status': opts['paymentStatus'],'start_date': opts['startDate'],'end_date': opts['endDate'],'start_number': opts['startNumber'],'end_number': opts['endNumber'],'start_year': opts['startYear'],'end_year': opts['endYear'],'type': opts['type'],'query': opts['query'],'paid_start_date': opts['paidStartDate'],'paid_end_date': opts['paidEndDate'],'fulfillment_start_date': opts['fulfillmentStartDate'],'fulfillment_end_date': opts['fulfillmentEndDate'],'last_modified_date': opts['lastModifiedDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentList;

      return this.apiClient.callApi(
        '/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the posPrint operation.
     * @callback moduleapi/DocumentApi~posPrintCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a printable POS PDF
     * Returns a printable POS PDF file of a particular document.
     * @param {Number} id 
     * @param {Number} size In which size the POS PDF should be rendered.
     * @param {module:api/DocumentApi~posPrintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    posPrint(id, size, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling posPrint");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling posPrint");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'size': size
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/documents/{id}/print/pos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendDocument operation.
     * @callback moduleapi/DocumentApi~sendDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendDocument{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send invoice to given email adresses.
     * Returns a list of emails, where the invoice is sent.
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SendDocument} opts.body List of email-s where you want to send the invoice.
     * @param {module:api/DocumentApi~sendDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sendDocument(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendDocument");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendDocument;

      return this.apiClient.callApi(
        '/documents/{id}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePayment operation.
     * @callback moduleapi/DocumentApi~updatePaymentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentHistory>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update payment history
     * Update payment history an existing document. Returns a payment history object if the update is succeded.
     * @param {Array.<module:model/PaymentHistory>} body Payment history object that you would like to update.
     * @param {Number} id 
     * @param {module:api/DocumentApi~updatePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePayment(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePayment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePayment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PaymentHistory];

      return this.apiClient.callApi(
        '/documents/{id}/payments', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}