/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ClientErrorResponse} from '../model/ClientErrorResponse';
import {CreateDocumentExport} from '../model/CreateDocumentExport';
import {DocumentExportId} from '../model/DocumentExportId';
import {DocumentExportStatus} from '../model/DocumentExportStatus';
import {ServerErrorResponse} from '../model/ServerErrorResponse';
import {SubscriptionErrorResponse} from '../model/SubscriptionErrorResponse';
import {TooManyRequestsResponse} from '../model/TooManyRequestsResponse';
import {ValidationErrorResponse} from '../model/ValidationErrorResponse';

/**
* DocumentExport service.
* @module api/DocumentExportApi
* @version 3.0.14
*/
export class DocumentExportApi {

    /**
    * Constructs a new DocumentExportApi. 
    * @alias module:api/DocumentExportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback moduleapi/DocumentExportApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentExportId{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create document export.
     * Return with the id of the export.
     * @param {module:model/CreateDocumentExport} body Create document export body.
     * @param {module:api/DocumentExportApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    create(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling create");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentExportId;

      return this.apiClient.callApi(
        '/document-export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the download operation.
     * @callback moduleapi/DocumentExportApi~downloadCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return exported binary file.
     * Return the exported file.
     * @param {String} id The ID from create document export endpoint.
     * @param {module:api/DocumentExportApi~downloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    download(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling download");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/_*', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/document-export/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the poll operation.
     * @callback moduleapi/DocumentExportApi~pollCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentExportStatus{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve export state.
     * Return state of the given export.
     * @param {String} id The ID from create document export endpoint.
     * @param {module:api/DocumentExportApi~pollCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    poll(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling poll");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentExportStatus;

      return this.apiClient.callApi(
        '/document-export/{id}/poll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}