/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Category} from './Category';
import {Currency} from './Currency';
import {SpendingPaymentMethod} from './SpendingPaymentMethod';

/**
 * The SpendingSave model module.
 * @module model/SpendingSave
 * @version 3.0.14
 */
export class SpendingSave {
  /**
   * Constructs a new <code>SpendingSave</code>.
   * @alias module:model/SpendingSave
   * @class
   * @param currency {module:model/Currency} 
   * @param totalGross {Number} 
   * @param totalGrossHuf {Number} 
   * @param totalVatAmount {Number} 
   * @param totalVatAmountHuf {Number} 
   * @param fulfillmentDate {Date} 
   * @param category {module:model/Category} 
   * @param paymentMethod {module:model/SpendingPaymentMethod} 
   */
  constructor(currency, totalGross, totalGrossHuf, totalVatAmount, totalVatAmountHuf, fulfillmentDate, category, paymentMethod) {
    this.currency = currency;
    this.totalGross = totalGross;
    this.totalGrossHuf = totalGrossHuf;
    this.totalVatAmount = totalVatAmount;
    this.totalVatAmountHuf = totalVatAmountHuf;
    this.fulfillmentDate = fulfillmentDate;
    this.category = category;
    this.paymentMethod = paymentMethod;
  }

  /**
   * Constructs a <code>SpendingSave</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SpendingSave} obj Optional instance to populate.
   * @return {module:model/SpendingSave} The populated <code>SpendingSave</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SpendingSave();
      if (data.hasOwnProperty('currency'))
        obj.currency = Currency.constructFromObject(data['currency']);
      if (data.hasOwnProperty('conversion_rate'))
        obj.conversionRate = ApiClient.convertToType(data['conversion_rate'], 'Number');
      if (data.hasOwnProperty('total_gross'))
        obj.totalGross = ApiClient.convertToType(data['total_gross'], 'Number');
      if (data.hasOwnProperty('total_gross_huf'))
        obj.totalGrossHuf = ApiClient.convertToType(data['total_gross_huf'], 'Number');
      if (data.hasOwnProperty('total_vat_amount'))
        obj.totalVatAmount = ApiClient.convertToType(data['total_vat_amount'], 'Number');
      if (data.hasOwnProperty('total_vat_amount_huf'))
        obj.totalVatAmountHuf = ApiClient.convertToType(data['total_vat_amount_huf'], 'Number');
      if (data.hasOwnProperty('fulfillment_date'))
        obj.fulfillmentDate = ApiClient.convertToType(data['fulfillment_date'], 'Date');
      if (data.hasOwnProperty('paid_at'))
        obj.paidAt = ApiClient.convertToType(data['paid_at'], 'Date');
      if (data.hasOwnProperty('category'))
        obj.category = Category.constructFromObject(data['category']);
      if (data.hasOwnProperty('comment'))
        obj.comment = ApiClient.convertToType(data['comment'], 'String');
      if (data.hasOwnProperty('invoice_number'))
        obj.invoiceNumber = ApiClient.convertToType(data['invoice_number'], 'String');
      if (data.hasOwnProperty('invoice_date'))
        obj.invoiceDate = ApiClient.convertToType(data['invoice_date'], 'Date');
      if (data.hasOwnProperty('due_date'))
        obj.dueDate = ApiClient.convertToType(data['due_date'], 'Date');
      if (data.hasOwnProperty('payment_method'))
        obj.paymentMethod = SpendingPaymentMethod.constructFromObject(data['payment_method']);
      if (data.hasOwnProperty('partner_id'))
        obj.partnerId = ApiClient.convertToType(data['partner_id'], 'Number');
    }
    return obj;
  }
}

/**
 * @member {module:model/Currency} currency
 */
SpendingSave.prototype.currency = undefined;

/**
 * @member {Number} conversionRate
 */
SpendingSave.prototype.conversionRate = undefined;

/**
 * @member {Number} totalGross
 */
SpendingSave.prototype.totalGross = undefined;

/**
 * @member {Number} totalGrossHuf
 */
SpendingSave.prototype.totalGrossHuf = undefined;

/**
 * @member {Number} totalVatAmount
 */
SpendingSave.prototype.totalVatAmount = undefined;

/**
 * @member {Number} totalVatAmountHuf
 */
SpendingSave.prototype.totalVatAmountHuf = undefined;

/**
 * @member {Date} fulfillmentDate
 */
SpendingSave.prototype.fulfillmentDate = undefined;

/**
 * @member {Date} paidAt
 */
SpendingSave.prototype.paidAt = undefined;

/**
 * @member {module:model/Category} category
 */
SpendingSave.prototype.category = undefined;

/**
 * @member {String} comment
 */
SpendingSave.prototype.comment = undefined;

/**
 * @member {String} invoiceNumber
 */
SpendingSave.prototype.invoiceNumber = undefined;

/**
 * @member {Date} invoiceDate
 */
SpendingSave.prototype.invoiceDate = undefined;

/**
 * @member {Date} dueDate
 */
SpendingSave.prototype.dueDate = undefined;

/**
 * @member {module:model/SpendingPaymentMethod} paymentMethod
 */
SpendingSave.prototype.paymentMethod = undefined;

/**
 * @member {Number} partnerId
 */
SpendingSave.prototype.partnerId = undefined;

