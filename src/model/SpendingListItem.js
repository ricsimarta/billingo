/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Category} from './Category';
import {Currency} from './Currency';
import {SpendingPartner} from './SpendingPartner';
import {SpendingPaymentMethod} from './SpendingPaymentMethod';

/**
 * The SpendingListItem model module.
 * @module model/SpendingListItem
 * @version 3.0.14
 */
export class SpendingListItem {
  /**
   * Constructs a new <code>SpendingListItem</code>.
   * @alias module:model/SpendingListItem
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>SpendingListItem</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SpendingListItem} obj Optional instance to populate.
   * @return {module:model/SpendingListItem} The populated <code>SpendingListItem</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SpendingListItem();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('organization_id'))
        obj.organizationId = ApiClient.convertToType(data['organization_id'], 'Number');
      if (data.hasOwnProperty('category'))
        obj.category = Category.constructFromObject(data['category']);
      if (data.hasOwnProperty('paid_at'))
        obj.paidAt = ApiClient.convertToType(data['paid_at'], 'Date');
      if (data.hasOwnProperty('fulfillment_date'))
        obj.fulfillmentDate = ApiClient.convertToType(data['fulfillment_date'], 'Date');
      if (data.hasOwnProperty('partner'))
        obj.partner = SpendingPartner.constructFromObject(data['partner']);
      if (data.hasOwnProperty('invoice_number'))
        obj.invoiceNumber = ApiClient.convertToType(data['invoice_number'], 'String');
      if (data.hasOwnProperty('currency'))
        obj.currency = Currency.constructFromObject(data['currency']);
      if (data.hasOwnProperty('conversion_rate'))
        obj.conversionRate = ApiClient.convertToType(data['conversion_rate'], 'Number');
      if (data.hasOwnProperty('total_gross'))
        obj.totalGross = ApiClient.convertToType(data['total_gross'], 'Number');
      if (data.hasOwnProperty('total_gross_local'))
        obj.totalGrossLocal = ApiClient.convertToType(data['total_gross_local'], 'Number');
      if (data.hasOwnProperty('total_vat_amount'))
        obj.totalVatAmount = ApiClient.convertToType(data['total_vat_amount'], 'Number');
      if (data.hasOwnProperty('total_vat_amount_local'))
        obj.totalVatAmountLocal = ApiClient.convertToType(data['total_vat_amount_local'], 'Number');
      if (data.hasOwnProperty('invoice_date'))
        obj.invoiceDate = ApiClient.convertToType(data['invoice_date'], 'Date');
      if (data.hasOwnProperty('due_date'))
        obj.dueDate = ApiClient.convertToType(data['due_date'], 'Date');
      if (data.hasOwnProperty('payment_method'))
        obj.paymentMethod = SpendingPaymentMethod.constructFromObject(data['payment_method']);
      if (data.hasOwnProperty('comment'))
        obj.comment = ApiClient.convertToType(data['comment'], 'String');
      if (data.hasOwnProperty('is_created_by_nav'))
        obj.isCreatedByNav = ApiClient.convertToType(data['is_created_by_nav'], 'Boolean');
    }
    return obj;
  }
}

/**
 * @member {Number} id
 */
SpendingListItem.prototype.id = undefined;

/**
 * @member {Number} organizationId
 */
SpendingListItem.prototype.organizationId = undefined;

/**
 * @member {module:model/Category} category
 */
SpendingListItem.prototype.category = undefined;

/**
 * @member {Date} paidAt
 */
SpendingListItem.prototype.paidAt = undefined;

/**
 * @member {Date} fulfillmentDate
 */
SpendingListItem.prototype.fulfillmentDate = undefined;

/**
 * @member {module:model/SpendingPartner} partner
 */
SpendingListItem.prototype.partner = undefined;

/**
 * @member {String} invoiceNumber
 */
SpendingListItem.prototype.invoiceNumber = undefined;

/**
 * @member {module:model/Currency} currency
 */
SpendingListItem.prototype.currency = undefined;

/**
 * @member {Number} conversionRate
 */
SpendingListItem.prototype.conversionRate = undefined;

/**
 * @member {Number} totalGross
 */
SpendingListItem.prototype.totalGross = undefined;

/**
 * @member {Number} totalGrossLocal
 */
SpendingListItem.prototype.totalGrossLocal = undefined;

/**
 * @member {Number} totalVatAmount
 */
SpendingListItem.prototype.totalVatAmount = undefined;

/**
 * @member {Number} totalVatAmountLocal
 */
SpendingListItem.prototype.totalVatAmountLocal = undefined;

/**
 * @member {Date} invoiceDate
 */
SpendingListItem.prototype.invoiceDate = undefined;

/**
 * @member {Date} dueDate
 */
SpendingListItem.prototype.dueDate = undefined;

/**
 * @member {module:model/SpendingPaymentMethod} paymentMethod
 */
SpendingListItem.prototype.paymentMethod = undefined;

/**
 * @member {String} comment
 */
SpendingListItem.prototype.comment = undefined;

/**
 * @member {Boolean} isCreatedByNav
 */
SpendingListItem.prototype.isCreatedByNav = undefined;

