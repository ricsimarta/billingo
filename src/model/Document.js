/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {CorrectionType} from './CorrectionType';
import {Currency} from './Currency';
import {Discount} from './Discount';
import {DocumentAncestor} from './DocumentAncestor';
import {DocumentItem} from './DocumentItem';
import {DocumentLanguage} from './DocumentLanguage';
import {DocumentNotificationStatus} from './DocumentNotificationStatus';
import {DocumentOrganization} from './DocumentOrganization';
import {DocumentPartner} from './DocumentPartner';
import {DocumentSettings} from './DocumentSettings';
import {DocumentSummary} from './DocumentSummary';
import {DocumentType} from './DocumentType';
import {OnlineSzamlaStatusEnum} from './OnlineSzamlaStatusEnum';
import {Partner} from './Partner';
import {PaymentMethod} from './PaymentMethod';
import {PaymentStatus} from './PaymentStatus';

/**
 * The Document model module.
 * @module model/Document
 * @version 3.0.14
 */
export class Document {
  /**
   * Constructs a new <code>Document</code>.
   * Document object representing your invoice. NOTE: partner property is deprecated. Please use document_partner instead.
   * @alias module:model/Document
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Document} obj Optional instance to populate.
   * @return {module:model/Document} The populated <code>Document</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Document();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('invoice_number'))
        obj.invoiceNumber = ApiClient.convertToType(data['invoice_number'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = DocumentType.constructFromObject(data['type']);
      if (data.hasOwnProperty('cancelled'))
        obj.cancelled = ApiClient.convertToType(data['cancelled'], 'Boolean');
      if (data.hasOwnProperty('block_id'))
        obj.blockId = ApiClient.convertToType(data['block_id'], 'Number');
      if (data.hasOwnProperty('payment_status'))
        obj.paymentStatus = PaymentStatus.constructFromObject(data['payment_status']);
      if (data.hasOwnProperty('payment_method'))
        obj.paymentMethod = PaymentMethod.constructFromObject(data['payment_method']);
      if (data.hasOwnProperty('gross_total'))
        obj.grossTotal = ApiClient.convertToType(data['gross_total'], 'Number');
      if (data.hasOwnProperty('currency'))
        obj.currency = Currency.constructFromObject(data['currency']);
      if (data.hasOwnProperty('conversion_rate'))
        obj.conversionRate = ApiClient.convertToType(data['conversion_rate'], 'Number');
      if (data.hasOwnProperty('invoice_date'))
        obj.invoiceDate = ApiClient.convertToType(data['invoice_date'], 'Date');
      if (data.hasOwnProperty('fulfillment_date'))
        obj.fulfillmentDate = ApiClient.convertToType(data['fulfillment_date'], 'Date');
      if (data.hasOwnProperty('due_date'))
        obj.dueDate = ApiClient.convertToType(data['due_date'], 'Date');
      if (data.hasOwnProperty('paid_date'))
        obj.paidDate = ApiClient.convertToType(data['paid_date'], 'Date');
      if (data.hasOwnProperty('organization'))
        obj.organization = DocumentOrganization.constructFromObject(data['organization']);
      if (data.hasOwnProperty('partner'))
        obj.partner = Partner.constructFromObject(data['partner']);
      if (data.hasOwnProperty('document_partner'))
        obj.documentPartner = DocumentPartner.constructFromObject(data['document_partner']);
      if (data.hasOwnProperty('electronic'))
        obj.electronic = ApiClient.convertToType(data['electronic'], 'Boolean');
      if (data.hasOwnProperty('comment'))
        obj.comment = ApiClient.convertToType(data['comment'], 'String');
      if (data.hasOwnProperty('tags'))
        obj.tags = ApiClient.convertToType(data['tags'], ['String']);
      if (data.hasOwnProperty('notification_status'))
        obj.notificationStatus = DocumentNotificationStatus.constructFromObject(data['notification_status']);
      if (data.hasOwnProperty('language'))
        obj.language = DocumentLanguage.constructFromObject(data['language']);
      if (data.hasOwnProperty('items'))
        obj.items = ApiClient.convertToType(data['items'], [DocumentItem]);
      if (data.hasOwnProperty('summary'))
        obj.summary = DocumentSummary.constructFromObject(data['summary']);
      if (data.hasOwnProperty('settings'))
        obj.settings = DocumentSettings.constructFromObject(data['settings']);
      if (data.hasOwnProperty('online_szamla_status'))
        obj.onlineSzamlaStatus = OnlineSzamlaStatusEnum.constructFromObject(data['online_szamla_status']);
      if (data.hasOwnProperty('related_documents'))
        obj.relatedDocuments = ApiClient.convertToType(data['related_documents'], [DocumentAncestor]);
      if (data.hasOwnProperty('discount'))
        obj.discount = Discount.constructFromObject(data['discount']);
      if (data.hasOwnProperty('correction_type'))
        obj.correctionType = CorrectionType.constructFromObject(data['correction_type']);
    }
    return obj;
  }
}

/**
 * The document's unique identifier.
 * @member {Number} id
 */
Document.prototype.id = undefined;

/**
 * The document's invoice number.
 * @member {String} invoiceNumber
 */
Document.prototype.invoiceNumber = undefined;

/**
 * @member {module:model/DocumentType} type
 */
Document.prototype.type = undefined;

/**
 * @member {Boolean} cancelled
 */
Document.prototype.cancelled = undefined;

/**
 * DocumentBlock's identifier.
 * @member {Number} blockId
 */
Document.prototype.blockId = undefined;

/**
 * @member {module:model/PaymentStatus} paymentStatus
 */
Document.prototype.paymentStatus = undefined;

/**
 * @member {module:model/PaymentMethod} paymentMethod
 */
Document.prototype.paymentMethod = undefined;

/**
 * The document's gross total price.
 * @member {Number} grossTotal
 */
Document.prototype.grossTotal = undefined;

/**
 * @member {module:model/Currency} currency
 */
Document.prototype.currency = undefined;

/**
 * @member {Number} conversionRate
 */
Document.prototype.conversionRate = undefined;

/**
 * @member {Date} invoiceDate
 */
Document.prototype.invoiceDate = undefined;

/**
 * @member {Date} fulfillmentDate
 */
Document.prototype.fulfillmentDate = undefined;

/**
 * @member {Date} dueDate
 */
Document.prototype.dueDate = undefined;

/**
 * @member {Date} paidDate
 */
Document.prototype.paidDate = undefined;

/**
 * @member {module:model/DocumentOrganization} organization
 */
Document.prototype.organization = undefined;

/**
 * @member {module:model/Partner} partner
 */
Document.prototype.partner = undefined;

/**
 * @member {module:model/DocumentPartner} documentPartner
 */
Document.prototype.documentPartner = undefined;

/**
 * @member {Boolean} electronic
 */
Document.prototype.electronic = undefined;

/**
 * @member {String} comment
 */
Document.prototype.comment = undefined;

/**
 * @member {Array.<String>} tags
 */
Document.prototype.tags = undefined;

/**
 * @member {module:model/DocumentNotificationStatus} notificationStatus
 */
Document.prototype.notificationStatus = undefined;

/**
 * @member {module:model/DocumentLanguage} language
 */
Document.prototype.language = undefined;

/**
 * @member {Array.<module:model/DocumentItem>} items
 */
Document.prototype.items = undefined;

/**
 * @member {module:model/DocumentSummary} summary
 */
Document.prototype.summary = undefined;

/**
 * @member {module:model/DocumentSettings} settings
 */
Document.prototype.settings = undefined;

/**
 * @member {module:model/OnlineSzamlaStatusEnum} onlineSzamlaStatus
 */
Document.prototype.onlineSzamlaStatus = undefined;

/**
 * @member {Array.<module:model/DocumentAncestor>} relatedDocuments
 */
Document.prototype.relatedDocuments = undefined;

/**
 * @member {module:model/Discount} discount
 */
Document.prototype.discount = undefined;

/**
 * @member {module:model/CorrectionType} correctionType
 */
Document.prototype.correctionType = undefined;

